/******************************************************************************
 * Vige, Home of Professional Open Source Copyright 2010, Vige, and           *
 * individual contributors by the @authors tag. See the copyright.txt in the  *
 * distribution for a full listing of individual contributors.                *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may    *
 * not use this file except in compliance with the License. You may obtain    *
 * a copy of the License at http://www.apache.org/licenses/LICENSE-2.0        *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 ******************************************************************************/
package it.vige.greenarea.itseasy.routing.swing;

import java.awt.event.ActionEvent;
import java.util.HashMap;

import com.mxgraph.model.mxCell;
import com.mxgraph.view.mxGraph;
import com.mxgraph.view.mxGraphView;

import it.vige.greenarea.I18N.I18N;
import it.vige.greenarea.itseasy.swing.editor.BasicGraphEditor;
import it.vige.greenarea.itseasy.swing.editor.LogisticsNetEditor;
import it.vige.greenarea.ln.model.LNCell;
import it.vige.greenarea.ln.routing.LNGraphAnalysis;

public class PathFinderDialog extends java.awt.Dialog {

	/**
	 * 
	 */
	private static final long serialVersionUID = -5114186208008930620L;
	private HashMap<String, mxCell> nodesMap = new HashMap<String, mxCell>();

	/** Creates new form PathFinderDialog */
	public PathFinderDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		sourceNodeCombo = new javax.swing.JComboBox();
		targetNodeCombo = new javax.swing.JComboBox();
		calculateButton = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		pathTextArea = new javax.swing.JTextArea();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();

		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				closeDialog(evt);
			}
		});

		sourceNodeCombo.setModel(
				new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

		targetNodeCombo.setModel(
				new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

		calculateButton.setText(I18N.getString("Calculate"));
		calculateButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				calculateButtonActionPerformed(evt);
			}
		});

		pathTextArea.setColumns(20);
		pathTextArea.setRows(5);
		jScrollPane1.setViewportView(pathTextArea);

		jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel1.setText(I18N.getString("SourceNode"));

		jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel2.setText(I18N.getString("TargetNode"));

		jLabel3.setText(I18N.getString("LogisticPath"));

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap(69, Short.MAX_VALUE)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(jLabel1).addComponent(jLabel2).addComponent(jLabel3))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(
								jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
										.addComponent(jScrollPane1)
										.addComponent(targetNodeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addComponent(sourceNodeCombo, 0, 230, Short.MAX_VALUE)
										.addComponent(calculateButton, javax.swing.GroupLayout.Alignment.LEADING))
						.addContainerGap()));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addGap(22, 22, 22)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(sourceNodeCombo, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel1))
						.addGap(18, 18, 18)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel2).addComponent(targetNodeCombo,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18).addComponent(calculateButton).addGap(18, 18, 18)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel3))
						.addContainerGap(55, Short.MAX_VALUE)));

		add(jPanel1, java.awt.BorderLayout.NORTH);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/** Closes the dialog */
	private void closeDialog(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_closeDialog
		setVisible(false);
		dispose();
	}// GEN-LAST:event_closeDialog

	private static final LNGraphAnalysis a = new LNGraphAnalysis();

	private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_calculateButtonActionPerformed
		mxCell source = nodesMap.get((String) (sourceNodeCombo.getSelectedItem()));
		mxCell target = nodesMap.get((String) (targetNodeCombo.getSelectedItem()));
		BasicGraphEditor editor = LogisticsNetEditor.getEditor();
		if (editor == null)
			editor = new LogisticsNetEditor();
		mxGraph logisticNetwork = editor.getGraphComponent().getGraph();
		Object[] path = a.getShortestPath(logisticNetwork, source, target, null, 100, false);
		this.pathTextArea.setText(toString(path));

	}// GEN-LAST:event_calculateButtonActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public void display(ActionEvent e) {
		BasicGraphEditor editor = (LogisticsNetEditor.getEditor());
		mxGraph logisticNetwork = editor.getGraphComponent().getGraph();
		Object root = logisticNetwork.getDefaultParent();
		Object[] cells = logisticNetwork.getChildCells(root);
		for (Object o : cells) {
			if (o instanceof mxCell) {
				mxCell cell = (mxCell) o;
				if (!cell.isEdge()) {
					nodesMap.put(editor.getGraphComponent().getGraph().convertValueToString(cell), cell);
				}
			}
		}
		sourceNodeCombo.setModel(new javax.swing.DefaultComboBoxModel(nodesMap.keySet().toArray()));
		targetNodeCombo.setModel(new javax.swing.DefaultComboBoxModel(nodesMap.keySet().toArray()));
		this.pathTextArea.setText("");
		this.setVisible(true);

	}

	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				PathFinderDialog dialog = new PathFinderDialog(new java.awt.Frame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {

					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton calculateButton;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextArea pathTextArea;
	private javax.swing.JComboBox sourceNodeCombo;
	private javax.swing.JComboBox targetNodeCombo;
	// End of variables declaration//GEN-END:variables

	private static LogisticsNetEditor editor = null;
	private static mxGraphView view;

	private static String toString(Object[] cells) {
		if (editor == null) {
			editor = LogisticsNetEditor.getEditor();
			view = editor.getGraphComponent().getGraph().getView();
		}
		Double overallCost = new Double(0.);
		StringBuilder sb = new StringBuilder();
		int legCount = (cells.length - 1) / 2;
		Object value;
		sb.append(Integer.toString(legCount)).append("\n");
		for (int i = 0; i < cells.length - 1;) {
			Object source = cells[i++];
			Object carrier = cells[i++];
			Object target = cells[i];

			if (source instanceof mxCell) {
				value = ((mxCell) source).getValue();
				if (value instanceof LNCell) {
					overallCost += ((LNCell) value).getCostFunction().getCost(view.getState(source));
					sb.append(I18N.getString("from")).append(": \"").append(((LNCell) value).getName()).append("\" ");
				} else {
					sb.append(" ---ERROR--- ");
					break;
				}

			}
			if (target instanceof mxCell) {
				value = ((mxCell) target).getValue();
				if (value instanceof LNCell) {
					overallCost += ((LNCell) value).getCostFunction().getCost(view.getState(target));
					sb.append(I18N.getString("to")).append(": \"").append(((LNCell) value).getName()).append("\" ");
				} else {
					sb.append(" ---ERROR--- ");
					break;
				}
			}

			if (carrier instanceof mxCell) {
				value = ((mxCell) carrier).getValue();
				if (value instanceof LNCell) {
					overallCost += ((LNCell) value).getCostFunction().getCost(view.getState(carrier));
					sb.append(I18N.getString("carrier")).append(": \"").append(((LNCell) value).getName())
							.append("\"\n");
				} else {
					sb.append(" ---ERROR--- ");
					break;
				}
			}
		}
		return overallCost.toString().concat("\n").concat(sb.toString());
	}
}
